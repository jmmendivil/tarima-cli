#!/usr/bin/env node

var path = require('path'),
    minimist = require('minimist');

var argv = minimist(process.argv.slice(2), {
  boolean: ['debug', 'force', 'quiet', 'watch', 'verbose', 'server', 'open'],
  string: ['map', 'only', 'exclude', 'dest', 'port', 'proxy', 'browser', 'globals', 'config', 'plugins', 'extensions'],
  alias: {
    b: 'bundle',
    q: 'quiet',
    D: 'dest',
    c: 'config',
    v: 'version',
    V: 'verbose',
    x: 'exclude',
    l: 'plugins',
    d: 'debug',
    f: 'force',
    w: 'watch',
    y: 'only',
    m: 'map',
    s: 'server',
    o: 'open',
    p: 'port',
    P: 'proxy',
    B: 'browser',
    G: 'globals',
    E: 'extensions'
  },
  '--': true
});

// common helpers
var $ = require('../lib/utils');

var logger = require('../lib/logger');

var die = process.exit.bind(process);

var thisPkg = require(path.join(__dirname, '../package.json'));

if (argv.help) {
  logger.writeln('USAGE:\n  ' + Object.keys(thisPkg.bin)[0] + ' [...] [OPTIONS]');
  logger.writeln(function() {/*---
OPTIONS:
  -D, --dest        Output directory
  -q, --quiet       Disable all logs
  -c, --config      Use configuration file (e.g. -c ./config.js)
  -b, --bundle      When enabled, setup all scripts as entries for bundling purposes,
                    it can be boolean or glob expression (e.g. -b "**\/main\/*.js")
  -l, --plugins     Load external modules as plugins (e.g. -l foo,bar)
  -V, --verbose     Increase log information
  -x, --exclude     Filter out sources using globs (e.g. -x test/broken -x .coffee)
                    Example patterns:
                      - *foo     -> !*foo
                      - .bar     -> !**\/*.bar
                      - x.y      -> !**\/x.y
                      - foo      -> !**\/foo/**
                      - foo/bar  -> !**\/foo\/bar/**
  -y, --only        Filter out non-matching sources using String.prototype.indexOf()
  -d, --debug       Enable compileDebug flag for some engines
  -f, --force       Compile all sources always
  -w, --watch       Enable file watching for all sources
  -s, --server      Enable web-server support (requires tarima-browser-sync)
                    You can configure this through `serverOptions`
  -o, --open        Enable to open your default (or configured) --browser
  -p, --port        Set a different port for BrowserSync (default: 3000)
  -P, --proxy       Enable proxying instead --server (e.g. -P localhost:8080)
  -B, --browser     Set a custom browser when --open is specified
  -G, --globals     Set custom values to inject on compiled scripts (e.g. -G FOO=BAR)
  -E, --extensions  Mappings for custom extensions (e.g. -E js:es6 -E css:post)
---*/}.toString().match(/---([\s\S]+)---/)[1].replace(/\\/g, ''));
  die(1);
}

if (argv.version) {
  logger.printf('{cyan|%s v%s}\n', thisPkg.name, thisPkg.version);
  die(1);
}

if (!argv.quiet) {
  logger.setLevel(argv.verbose ? 'verbose' : argv.debug ? 'debug' : 'info');
}

var run = require('../lib'),
    spawn = require('child_process').spawn;

var cwd = process.cwd(),
    pkg = path.join(cwd, 'package.json');

var fixedDest = argv.dest || 'build',
    fixedSrc = argv._.length ? argv._ : ['src'];

// normalize sources
fixedSrc = (fixedSrc.length > 1 ? '{' + fixedSrc.join(',') + '}' : fixedSrc[0]) + '/**/*';

var defaultConfig = {
  cwd: cwd,
  src: fixedSrc,
  dest: path.join(cwd, fixedDest),
  cache: path.join(cwd, fixedDest, 'index.json'),
  public: path.join(cwd, fixedDest),
  bundle: argv.bundle === true ? '**' : argv.bundle,
  filter: [],
  plugins: argv.plugins ? fixedArray(argv.plugins) : [],
  force: argv.force,
  watch: argv.watch,
  server: argv.server,
  open: argv.open,
  port: argv.port,
  proxy: argv.proxy,
  browser: argv.browser,
  notifications: {
    title: thisPkg.name,
    okIcon: path.join(__dirname, 'ok.png'),
    errIcon: path.join(__dirname, 'err.png')
  },
  bundleOptions: {
    globals: {},
    extensions: {}
  }
};

if ($.isFile(pkg)) {
  var mainPkg = $.readJSON(pkg);

  $.merge(defaultConfig, mainPkg.tarima || {});

  Object.keys(mainPkg.devDependencies || {}).forEach(function(dep) {
    if (dep !== 'tarima-cli' && dep.indexOf('tarima-') === 0) {
      defaultConfig.plugins.push(dep);
    }
  });
}

if ($.isFile(argv.config)) {
  $.merge(defaultConfig, $.readJSON(argv.config) || {});
}

function fixedArray(obj) {
  return !Array.isArray(obj) ? obj.split(',') : obj;
}

function fixedValue(string) {
  if (/^-?\d+(\.\d+)?$/.test(string)) {
    return parseFloat(string);
  }

  var values = {
    true: true,
    false: false
  };

  if (typeof values[string] !== 'undefined') {
    return values[string];
  }

  return string || null;
}

if (argv.only) {
  var test = fixedArray(argv.only);

  defaultConfig.filter.push(function(value) {
    value = path.relative(defaultConfig.src, value);

    for (var key in test) {
      if (value.indexOf(test[key]) > -1) {
        return true;
      }
    }
  });
}

if (argv.exclude) {
  fixedArray(argv.exclude).forEach(function(skip) {
    if (skip.indexOf('*') > -1) {
      defaultConfig.filter.push('!' + skip);
    } else if (skip.substr(0, 1) === '.') {
      defaultConfig.filter.push('!**/*' + skip);
    } else if (skip.indexOf('.') > -1) {
      defaultConfig.filter.push('!**/' + skip);
    } else {
      defaultConfig.filter.push('!**/' + skip + '/**');
    }
  });
}

if (argv.globals) {
  fixedArray(argv.globals).forEach(function(value) {
    var parts = value.split('=');

    defaultConfig.bundleOptions.globals[parts[0]] = fixedValue(parts[1]);
  });
}

if (argv.extensions) {
  $.toArray(argv.extensions).forEach(function(exts) {
    var parts = exts.split(':');

    defaultConfig.bundleOptions.extensions[parts[0]] = parts[1];
  });
}

defaultConfig.bundleOptions.compileDebug = argv.debug;
defaultConfig.bundleOptions.verboseDebug = argv.verbose;

var cmd = argv['--'],
    child;

function errLog(message) {
  process.stderr.write('\r' + $.color.red(message) + '\n');
}

function infoFiles(result) {
  if (argv.watch) {
    if (result.output.length) {
      $.notify(result.output.length + ' file' + (result.output.length !== 1 ? 's' : '') + ' in ' + result.elapsed,
        defaultConfig.notifications.title,
        defaultConfig.notifications.okIcon);
    }
  } else if (!result.output.length) {
    logger.getLogger()
      .INFO('{log|Without changes (%s)}', result.elapsed);
  } else {
    logger.getLogger()
      .INFO('{log|%s file%s written in %s}',
        result.output.length,
        result.output.length !== 1 ? 's' : '',
        result.elapsed);
  }
}

function exec(onError) {
  function start() {
    var start = new Date();

    logger.writeln($.color.cyan(cmd[0]) + ' ' + cmd.slice(1).join(' '));

    child = spawn(cmd[0], cmd.slice(1), { detached: true });

    child.stdout.pipe(process.stdout);

    var errors = [];

    child.stderr.on('data', function(data) {
      var line = data.toString().trim();

      if (line) {
        errors.push(line);
      }
    });

    child.on('close', function(exitCode) {
      var end = $.timeDiff(start);

      var message = '`' + cmd.join(' ') + '`\nâ€” ',
          icon = defaultConfig.notifications.okIcon;

      if (exitCode || errors.length) {
        icon = defaultConfig.notifications.errIcon;
        message += 'Error';
      } else {
        message += 'Done in ' + end;
      }

      $.notify(message, defaultConfig.notifications.title, icon);

      if (errors.length) {
        errLog(errors.join('\n'));
        onError({ msg: errors.join('\n') });
      }

      logger.writeln($.color[exitCode || errors.length  ? 'red' : 'cyan'](cmd[0]) + ' done in ' + end);

      if (exitCode && !argv.watch) {
        die(exitCode);
      }
    });
  }

  if (child) {
    child.on('close', start);
    child.kill('SIGINT');
  } else {
    start();
  }
}

logger.getLogger()
  .INFO('{log|Processing sources from `%s`}', defaultConfig.src)
  .INFO('{log|Writting files to `%s`}', path.relative(cwd, defaultConfig.dest) || '.');

process.on('SIGINT', function() {
  if (child) {
    logger.writeln('\r' + $.color.cyan(cmd[0]) + ' done (SIGINT)');
    child.kill('SIGINT');
  }

  die();
});

run(defaultConfig, function(err, result) {
  if (err) {
    logger.erase('lineLeft');
    errLog(err.message || err.toString());

    if (!(argv.server || argv.watch)) {
      die(1);
    }

    return;
  }

  if (argv.server && !argv.watch) {
    logger.getLogger()
      .INFO('{log|Nothing to watch... [press CTRL-C to quit]}');
  }

  if (result && result.output) {
    infoFiles(result);
  }

  if (!argv.watch && err) {
    if (child) {
      child.kill();
    }

    die(1);
  }

  if (result && argv.watch) {
    logger.getLogger()
      .INFO('{log|Waiting for changes... [press CTRL-C to quit]}');
  }

  if (cmd.length && !err) {
    exec(this.emit.bind(null, 'error'));
  }
});
