#!/usr/bin/env node

var start = new Date();

var run = require('./'),
    path = require('path'),
    minimist = require('minimist');

var $ = require('./utils');

var cwd = process.cwd(),
    die = process.exit.bind(process),
    pkg = path.join(cwd, 'package.json');

var argv = minimist(process.argv.slice(2), {
  boolean: ['force', 'watch', 'bundle', 'verbose'],
  string: ['only'],
  alias: {
    b: 'bundle',
    f: 'force',
    w: 'watch',
    i: 'only'
  }
});

var fixedSrc = argv._[0] || 'src',
    fixedDest = argv._[1] || 'build';

var defaultConfig = {
  cwd: cwd,
  src: path.join(cwd, fixedSrc),
  dest: path.join(cwd, fixedDest, 'dist'),
  cache: path.join(cwd, fixedDest, 'index.json'),
  force: argv.force,
  watch: argv.watch,
  bundle: argv.bundle,
  filtered: ['!**/_*.*'],
  extensions: {
    jade: 'html',
    less: 'css',
    coffee: 'js'
  }
};

if ($.isFile(pkg)) {
  $.merge(defaultConfig, $.readJSON(pkg).tarima || {});
}

if (argv.only) {
  if (!defaultConfig.filtered) {
    defaultConfig.filtered = [];
  }

  var test = !Array.isArray(argv.only) ? argv.only.split(/[,:|]/) : argv.only;

  defaultConfig.filtered.push(function(value) {
    for (var key in test) {
      if (value.indexOf(test[key]) > -1) {
        return true;
      }
    }
  });
}

run(defaultConfig, function(err, result) {
  if (err) {
    console.log($.style('{red|%s}', argv.verbose && err.stack || err.message || err));
    die(1);
  }

  console.log($.style('{cyan|%s file(s) synced in %s}', result.files.length, $.timeDiff(start)));
});
